#!/bin/bash
alias r='source $BASH_SOURCE'
echo GH SOURCED!

ghub() {
    declare path=$1
    : ${path:? required}
    shift # shits the first parameter. insterted path separately and inserts the rest fi there is ny
    curl \
        -H "Authorization: token $GH_TOKEN" \
        https://api.github.com/${path#/} \
        "$@"
}

teams() {
    ghub /orgs/lalyos-trainings/teams -s |
        jq .[].name -r # -r = raw
}

devs() {
    ghub /organizations/2652852/team/7635002/members -s |
        jq .[].login -r
}

show_name_login() {
    printf '%20s %20s' "LOGIN" "NAME"
    for i in {1..2}; do
        echo
    done

    cat devs.txt | while read name; do
        real=$(ghub /users/$name -s | jq .name -r)
        printf '%20s %20s\n' "${name}" "${real}"
    done
}

show_name_order() {

    devs | while read name order; do
        real=$(ghub /users/$name -s | jq .name -r)
        myorder=$(ghub /users/$name -s | jq .order -r)
        printf "name: %15s, order: %15s\n" "${real} ${myorder}"
    done
}

# ghub /users/McLoad6 | jq .[].name
#  cat devs.txt | while read name; do echo $name; done
# ghub /users | jq .[].login -r

# cat devs.txt | while read name; do echo $name; read ghub /users | jq .[].login -r; done
# ghub /users/8Klaro8 | jq .name

# DONE
# cat devs.txt | while read name; do echo $name; ghub /users/$name -s | jq .name -r; echo ; done

# ISSES API
# https://api.github.com/repos/lalyos/
# ghub repos/lalyos/git-wed/issues
# ghub repos/lalyos/git-wed/issues -s | jq .[].body -r

# while read food; do echo $food; ghub repos/lalyos/git-wed/issues -s | jq .[].body -r; done

show_name_food() {

    ghub repos/lalyos-trainings/git-wed/issues -s | jq .[] -c | while read order; do
        user=$(echo $order | jq .user.login -r)
        food=$(echo $order | jq .body -r)
        printf "%40s %40s\n" "${food} ${user}"
    done
}

#   https://api.github.com/repos/OWNER/REPO/issues \
#   -d '{"title":"Found a bug","body":"I'

post_issue() {
    declare title=$1 body=$2
    : ${title:? required} ${body:? required}

    echo '{"title": "'$title'", "body": "'$body'"}'

    # ghub repos/lalyos-trainings/git-wed/issues \
    # -d '{"title": "$(title)", "body": "$(body)"}'

    echo todo...
}

close-all() {
    ghub repos/lalyos-trainings/git-wed/issues -s | jq .[].number | while read issue; do
        echo === closing issue: ${issue}
        ghub repos/lalyos-trainings/git-wed/issues/${issue} -X PATCH -d '{"state":"closed"}' &>/dev/null & # -> put to background
    done

}

issue-json() {
    cat <<EOF
{
  "title":"${1:? title required}",
  "body":"${2:? body required}"
}
EOF
}

issue() {
    declare title=$1 body=$2
    : ${title:? required} ${body:? required}

    echo arg nums: $#
    if [[ $# -gt 2 ]]; then
        echo too many args ... consider using quotation
        return
    fi

    json=$(issue-json "$@") # "$title" "$body"
    ghub repos/lalyos-trainings/git-wed/issues -d "${json}"
}

# coffe-break-for-robin

coffee-issue() {
    declare title=$1 body=$2

    my_json=$(
        cat <<EOF
{
  "title":"${1:? title required}",
  "body":"${2:? body required}"
}
EOF
    )

    ghub repos/lalyos-trainings/git-wed/issues -d "${my_json}"
}

# post_comment_to_issue() {
#     # https://github.com/lalyos-trainings/git-wed/issues/89/comments
#     ghub https://api.github.com/repos/OWNER/REPO/issues/comments/COMMENT_ID \
#         -d '{"body":"Me too"}'

# }

post_comment_to_issue() {
    declare comment_id=$1 comment=$2

    default_id="89"
    default_comment="def_comm"

    #     my_json=$(
    #         cat <<EOF
    # {
    #   "comment_id":"${1:? comment_id required}",
    #   "comment":"${2:? comment required}"
    # }
    # EOF
    # )

    # POST NEW COMMENT
    ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${comment_id:-$default_id}/comments -X POST -d '{"body":"'${comment:-$default_comment}'"}'
}

update_comment_title() {
    declare comment_id=$1 comment=$2

    default_id="89"
    default_comment="def_comm"

        my_json=$(
        cat <<EOF
{
  "body":"${2:? comment required}"
}
EOF
    )

    echo ${my_json}
    # UPDATE COMMENT TITLE
    ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${comment_id:-default_id} -X PATCH -d "${my_json}"}
}

# GLOBALY CHOOSED ITEM

# REACT ISSUE
reactions() {
    declare issue_id=$1 emoji=$2
    choosed_item

    echo Do you want to check issue\'s emojis "(y/n)"?
    read check_emojis

    if [[ "${check_emojis}" = "y" ]]; then
        list_reactions_on_issue

        echo Continue program "(y/n)"?
        read cont_prog

        if [[ ${cont_prog} = "y" ]]; then
            next_step_load
            break 2> /dev/null # NOT a useless break
        else
            echo BYE!
            return
        fi

    else    
        # continues and "loads" -> simulates loading
        next_step_load
    fi


    if ! [[ ${emoji} ]]; then

        # echo Please select an emoji type.
        # select_emojis

        # SELECT
            emoji_path=/home/robing/emojis.txt

            # CREATE AN ARRAY
            items=()
            while read -r line;do
                items+=(${line})
                # echo added ${line}
            done < ${emoji_path}

            echo ${items[0]}

            PS3="Select an item: "
            select choosed_item in "${items[@]}";do
                if [[ -n ${choosed_item} ]]; then
                    echo You selected: ${choosed_item}
                    ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${issue_id:-89}/reactions -X POST -d '{"content": "'${choosed_item}'"}' 
                    echo -e "\nEMOJI ADDED!"
                else
                    echo Invalid option
                fi
            done

        return # TEMP RETURN
        read choice

        ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${issue_id:-89}/reactions -X POST -d '{"content": "'${choosed_item}'"}'
        echo -e "\nEMOJI ADDED!"

    else
        ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${issue_id:-89}/reactions -X POST -d '{"content": "'${emoji}'"}'
        echo -e "\nEMOJI ADDED!"

    fi
    
    # ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/89/reactions -X POST -d '{"content": "'${my_choice}'"}'
    # ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${issue_id:-89}/reactions -X POST -d '{"content": "'${choice:-emoji}'"}'

    # TODO gives a list and I can choose using its number

}

select_emojis() {
    emoji_path=/home/robing/emojis.txt

    # CREATE AN ARRAY
    items=()
    while read -r line;do
        items+=(${line})
        # echo added ${line}
    done < ${emoji_path}

    echo ${items[0]}

    PS3="Select an item: "
    select choosed_item in "${items[@]}";do
        if [[ -n ${choosed_item} ]]; then
            echo You selected: ${choosed_item}
            return
        else
            echo Invalid option
        fi
    done


    # cat ${emoji_path} | while read line; do
    #     echo ${line}
    # done
}

next_step_load() {
    echo -e "\n========="
    echo -n "Go to next step"
    for i in {1..3};do
        sleep 0.2
        echo -n .
    done
    echo -e "\n=========\n"

}

list_reactions_on_issue() {
    declare issue_id=$1 

    echo -e "\n" # just printing a new line for clarity

    ghub -L https://api.github.com/repos/lalyos-trainings/git-wed/issues/${issue_id:-89}/reactions -s | jq .[].content -r 2> /dev/null

    echo -e "\n"
}

print_emojis() {
    echo type one of these:
    echo +1
    echo -1
    echo laugh
    echo confused
    echo heart
    echo hooray
    echo rocket
    echo eyes


}

#
# patch close

# ghub repos/lalyos-trainings/git-wed/issues/${issue} -X PATCH -d '{"state":"closed"}'

# post_issue() {

#     ghub repos/lalyos-trainings/git-wed/issues -d '{"title":"coffee", "body":"cappucino"}'
# }
